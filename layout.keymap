
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>


/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
};

/ {
    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };
};

    /* Custom Defined Behaviors */
/ {
    behaviors {
    // lower as 2nd layer
    lower2: tap_dance_1 {
        compatible = "zmk,behavior-tap-dance";
        label = "LAYER_TAP_DANCE";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&mo 2>, <&to 2>;
    };

    hashgrave: dvp_hash_grave {
        compatible = "zmk,behavior-mod-morph";
        label = "DVP_HASH_GRAVE";
        #binding-cells = <0>;
        bindings = <&kp HASH>, <&kp GRAVE>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
    };

    atcaret: dvp_at_caret {
        compatible = "zmk,behavior-mod-morph";
        label = "DVP_AT_CARET";
        #binding-cells = <0>;
        bindings = <&kp AT>, <&kp CARET>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
    };

    ampspercent: dvp_ampersand_percent {
        compatible = "zmk,behavior-mod-morph";
        label = "DVP_AMPERSAND_PERCENT";
        #binding-cells = <0>;
        bindings = <&kp AMPS>, <&kp PERCENT>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
    };

    dllrtilde: dvp_dollar_tilde {
        compatible = "zmk,behavior-mod-morph";
        label = "DVP_DOLLAR_TILDE";
        #binding-cells = <0>;
        bindings = <&kp DLLR>, <&kp TILDE>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
    };

    dvp7: dvp_lbkt_n7 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVP_LBKT_N7";
        #binding-cells = <0>;
        bindings = <&kp LBKT>, <&kp N7>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
    };

    dvp5: dvp_lbrc_n5 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVP_LBRC_N5";
        #binding-cells = <0>;
        bindings = <&kp LBRC>, <&kp N5>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
    };

    dvp3: dvp_rbrc_n3 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVP_RBRC_N3";
        #binding-cells = <0>;
        bindings = <&kp RBRC>, <&kp N3>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
    };

    dvp1: dvp_lpar_n1 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVP_LPAR_N1";
        #binding-cells = <0>;
        bindings = <&kp LPAR>, <&kp N1>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
    };

    dvp9: dvp_equal_n9 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVP_EQUAL_N9";
        #binding-cells = <0>;
        bindings = <&kp EQUAL>, <&kp N9>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
    };

    dvp0: dvp_star_n0 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVP_STAR_N0";
        #binding-cells = <0>;
        bindings = <&kp STAR>, <&kp N0>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
    };

    dvp2: dvp_rpar_n2 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVP_RPAR_N2";
        #binding-cells = <0>;
        bindings = <&kp RPAR>, <&kp N2>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
    };

    dvp4: dvp_plus_n4 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVP_PLUS_N4";
        #binding-cells = <0>;
        bindings = <&kp PLUS>, <&kp N4>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
    };

    dvp6: dvp_rbkt_n6 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVP_RBKT_N6";
        #binding-cells = <0>;
        bindings = <&kp RBKT>, <&kp N6>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
    };

    dvp8: dvp_excl_n8 {
        compatible = "zmk,behavior-mod-morph";
        label = "DVP_EXCL_N8";
        #binding-cells = <0>;
        bindings = <&kp EXCL>, <&kp N8>;
        mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
    };
};

};

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
         &kp F1    &kp F2     &kp F3    &kp F4     &kp F5                                                                                  &kp F6    &kp F7    &kp F8    &kp F9     &kp F10
   &ampspercent     &dvp7      &dvp5     &dvp3      &dvp1   &dvp9                                                                   &dvp0   &dvp2     &dvp4     &dvp6     &dvp8  &hashgrave
        &kp TAB  &kp SEMI  &kp COMMA   &kp DOT      &kp P   &kp Y                                                                   &kp F   &kp G     &kp C     &kp R     &kp L   &kp SLASH
 &mt LCTRL BSPC     &kp A      &kp O     &kp E      &kp U   &kp I                                                                   &kp D   &kp H     &kp T     &kp N     &kp S   &kp MINUS
     &dllrtilde   &kp SQT      &kp Q     &kp J      &kp K   &kp X  &kp LSHFT  &kp LCTRL   &lower2  &kp LGUI  &kp RCTRL  &kp RSHFT   &kp B   &kp M     &kp W     &kp V     &kp Z    &atcaret
     &magic 3 0  &kp HOME    &kp END  &kp LEFT  &kp RIGHT          &kp SPACE    &kp DEL  &kp LALT  &kp RALT    &kp RET    &kp ESC          &kp UP  &kp DOWN  &kp LBKT  &kp RBKT    &kp BSLH
            >;
        };

        layer_QWERTY {
            bindings = <
     &trans  &trans  &trans  &trans  &trans                                                                  &trans     &trans   &trans    &trans     &trans
  &kp EQUAL  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                                                  &kp N6  &kp N7     &kp N8   &kp N9    &kp N0  &kp MINUS
     &trans   &kp Q   &kp W   &kp E   &kp R   &kp T                                                   &kp Y   &kp U      &kp I    &kp O     &kp P   &kp BSLH
     &trans   &kp A   &kp S   &kp D   &kp F   &kp G                                                   &kp H   &kp J      &kp K    &kp L  &kp SEMI    &kp SQT
  &kp GRAVE   &kp Z   &kp X   &kp C   &kp V   &kp B  &trans  &trans  &trans  &trans  &trans  &trans   &kp N   &kp M  &kp COMMA  &kp DOT  &kp FSLH     &trans
 &magic 3 0  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans     &trans   &trans    &trans     &trans
            >;
        };

        layer_Lower {
            bindings = <
 &kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT   &kp C_PP                                                                        &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
       &trans         &none       &none       &none      &none   &kp HOME                                                   &kp LPAR  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY        &kp PSCRN
       &trans         &none       &none      &kp UP      &none    &kp END                                                   &kp RPAR   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS         &kp SLCK
       &trans         &none    &kp LEFT    &kp DOWN  &kp RIGHT  &kp PG_UP                                                  &kp PRCNT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
       &trans     &kp K_APP       &none     &kp F11    &kp F12  &kp PG_DN  &trans  &trans   &to 0   &to 1  &trans  &trans  &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
   &magic 3 0      &kp CAPS     &kp INS     &kp F11    &kp F12             &trans  &trans  &trans   &to 0  &trans  &trans              &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
      &reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none          &reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

    };
};
